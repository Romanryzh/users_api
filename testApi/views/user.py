from aiohttp import web
import pandas
import logging
import json
from openpyxl.worksheet.worksheet import Worksheet

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def create_user(request):
    """
    Функция для создания пользователя и записи его в базу данных
    """
    try:
        logger.info("Получен запрос на создание нового пользователя")
        data = await request.json()
        logger.info(f"Получены данные: {data}")
        async with request.app['db'].acquire() as connection:
            await connection.execute("""
                INSERT INTO public.users (first_name, last_name, phone_number, age)
                VALUES ($1, $2, $3, $4)
                """, data['first_name'], data['last_name'], data['phone_number'], data['age'])
            logger.info(f"Пользователь {data['first_name']} {data['last_name']} успешно записан в базу данных")
        return web.Response(json.dumps({"success": "Пользователь успешно зарегистрирован"}), status=201)
    except Exception as e:
        logger.error(e)
        return web.Response(
            body=json.dumps({"error": e}), status=400)


async def get_user(request):
    """
    Функция для получения id пользователя по запросу
    """
    try:
        logger.info('Получен запрос на получение пользователя из базы данных')
        user_id = int(request.match_info['id'])
        logger.info(f'Получен id: {user_id}')
        async with request.app['db'].acquire() as connection:
            user = await connection.fetchrow('SELECT * FROM public.users WHERE id = $1', user_id)
        if user:
            logger.info(f"Найден пользователь под номером {user['id']}: {user['first_name']} {user['last_name']}")
        else:
            logger.warning(f"Пользователь под номером {user['id']} не найден")
        return web.json_response(dict(user))
    except Exception as e:
        logger.error(e)
        return web.Response(body=json.dumps({"error": e}))


async def get_users(request):
    """
    Функция для получения списка пользователей и для фильтрации по столбцу first_name
    в удобном для пользователя формате, json или excel
    """
    logger.info('Получен запрос на получение списка пользователей из базы данных')
    format_type = request.rel_url.query.get('format', 'json')
    first_name = request.rel_url.query.get('first_name', None)
    async with request.app['db'].acquire() as conn:
        if first_name:
            # Если параметр first_name передан, то фильтруем по нему
            users = await conn.fetch('SELECT * FROM public.users WHERE first_name ILIKE $1', f'%{first_name}%')
        else:
            # Если параметр first_name отсутствует, возвращаем всех пользователей
            users = await conn.fetch('SELECT * FROM public.users')

    users_list = [dict(user) for user in users]

    if format_type == 'excel':
        # Если запрашивается Excel, создаем и возвращаем файл
        df = pandas.DataFrame(users_list)
        df.to_excel('users.xlsx', index=False)
        return web.FileResponse('users.xlsx')

    # По умолчанию возвращаем список пользователей в формате JSON
    return web.json_response(users_list)


async def update_user(request):
    """
    Функция для обновления данных пользователя по его id в базе данных
    """
    try:
        logger.info('Получен запрос на обновление данных пользователя по его id в базе данных')
        user_id = int(request.match_info['id'])  # Получаем id пользователя
        logger.info(f'Получен id: {user_id}')
        data = await request.json()  # Получаем новые данные
        logger.info(f'')
        async with request.app['db'].acquire() as connection:
            await connection.execute("""
                UPDATE public.users
                SET first_name = $1, last_name = $2, phone_number = $3, age = $4
                WHERE id = $5
            """, data['first_name'], data['last_name'], data['phone_number'], data['age'], user_id)  # Обновляем данные пользователя
        return web.Response(text="User updated", status=200)  # Возвращаем подтверждение
    except Exception as e:
        logger.error(e)
        return web.Response()

async def get_user_count(request):
    """
    Функция для получения количества пользователей в таблице
    """
    async with request.app['db'].acquire() as connection:
        count = await connection.fetchval('SELECT COUNT(*) FROM public.users')  # Получаем количество пользователей
    return web.json_response({'count': count})  # Возвращаем ответ













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































