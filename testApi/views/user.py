from aiohttp import web
import pandas
from io import BytesIO
import logging
import json


# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def create_user(request):
    """
    Функция для создания пользователя и записи его в базу данных
    """
    try:
        logger.info("Получен запрос на создание нового пользователя")
        data = await request.json()  # Получаем данные из тела запроса
        logger.info(f"Получены данные: {data}")
        # произвести валидацию данных
        async with request.app['db'].acquire() as connection:  # Подключаемся к БД  вынести в отдельный модуль
            await connection.execute("""
                INSERT INTO public.users (first_name, last_name, phone_number, age)
                VALUES ($1, $2, $3, $4)
                """, data['first_name'], data['last_name'], data['phone_number'], data['age'])  # Выполняем SQL запрос
            logger.info(f"Пользователь {data['first_name']} {data['last_name']} успешно записан в базу данных")
        return web.Response(json.dumps({"success": "Пользователь успешно зарегистрирован"}), status=201)  # Возвращаем ответ Вернуть объект созданного пользователя и его id
    except Exception as e:
        logger.error(e)
        return web.Response(
            body=json.dumps({"error": "Переданы некорректные параметры создания пользователя"}), status=400) # Вернуть поля в которых были ошибки


async def get_user(request):
    """
    Функция для получения id пользователя по запросу
    """
    try:
        user_id = int(request.match_info['id'])  # Получаем id из пути запроса
        async with request.app['db'].acquire() as connection:
            user = await connection.fetchrow('SELECT * FROM public.users WHERE id = $1', user_id)
        if user:
            logger.info(f"Найден пользователь под номером {user['id']}: {user['first_name']} {user['last_name']}")
        else:
            logger.warning(f"Пользователь под номером {user['id']} не найден")
        return web.json_response(dict(user))  # Возвращаем данные в формате JSON
    except Exception as e:
        logger.error(e)
        return web.Response(body=json.dumps({"error": "Неверный тип вводных данных"}))


async def get_users(request):
    """
    Функция для получения списка пользователей, в удобном формате, json or Excel
    """
    format = request.query.get('format', 'json')
    async with request.app['db'].acquire() as connection:
        users = await connection.fetch('SELECT * FROM public.users')  # Получаем список пользователей

    if format == 'excel':
        df = pandas.DataFrame(users)  # Преобразуем данные в DataFrame
        output = BytesIO()
        df.to_excel(output, index=False)  # Записываем в Excel файл
        output.seek(0)
        return web.Response(body=output, headers={
            'Content-Disposition': 'attachment; filename="users.xlsx"',
            'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        })  # Возвращаем Excel файл
    else:
        return web.json_response([dict(user) for user in users])  # Возвращаем данные в формате JSON


async def update_user(request):
    """
    Функция для обновления данных пользователя по его id в базе данных
    """
    user_id = int(request.match_info['id'])  # Получаем id пользователя
    data = await request.json()  # Получаем новые данные
    async with request.app['db'].acquire() as connection:
        await connection.execute("""
            UPDATE public.users
            SET first_name = $1, last_name = $2, phone_number = $3, age = $4
            WHERE id = $5
        """, data['first_name'], data['last_name'], data['phone_number'], data['age'], user_id)  # Обновляем данные пользователя
    return web.Response(text="User updated", status=200)  # Возвращаем подтверждение


async def get_user_count(request):
    """
    Функция для получения количества пользователей в таблице
    """
    async with request.app['db'].acquire() as connection:
        count = await connection.fetchval('SELECT COUNT(*) FROM public.users')  # Получаем количество пользователей
    return web.json_response({'count': count})  # Возвращаем ответ


async def get_users_filtered(request):
    """
    Функция для получения списка пользователей, по параметру для фильтрации
    """
    first_name = request.query.get('first_name', '')  # Получаем параметр для фильтрации
    async with request.app['db'].acquire() as connection:
        users = await connection.fetch('SELECT * FROM public.users WHERE first_name ILIKE $1', f'%{first_name}%')  # Выполняем SQL запрос с фильтрацией
    return web.json_response([dict(user) for user in users])  # Возвращаем отфильтрованные данные











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































